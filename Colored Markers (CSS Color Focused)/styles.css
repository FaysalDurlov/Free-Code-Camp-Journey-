h1{
    text-align: center;
}
.container{
    background-color: rgb(255, 255, 255);
    padding: 10px 0;
    /* works similer like margin */
}
.marker{
    width: 200px;
    height: 25px;
    /* here on margin the first value 
    setting for top and bottom which is 10px
    and 2nd value setting right left which is auto */
    margin: 10px auto;
}
.cap{
    width: 60px;
    height: 25px;
}
.sleeve{
    width: 110px;
    height: 25px;
    background-color: rgba(255,255,255, 0.5);
    /* opacity: 0.5; 
    can set opacity with this 0 is 0% 1.0 is 100%
    but now I have done this this rgba funtion
    */

    /* border-left-width: 10px;
    border-left-color: black;
    border-left-style: solid; 
    I can use this 3 rule sepretly or I can use this
    border-left: width style color;
    */
    border-left: 10px double rgba(0, 0, 0,75%);
}
.sleeve,.cap{
    display: inline-block;
}

.red{
    /* background: linear-gradient(180deg,rgb(122,74,14) 0%,rgb(245, 62, 113)50%,rgb(162,27,27)100%); 
    this is set by deafult by the linear gradient */
    background: linear-gradient(rgb(122, 74, 14), rgb(245, 62, 113), rgb(162, 27, 27));
    box-shadow: 0px 0px 20px 0 rgba(83, 14, 14, 0.8);


    /*49 step to image background something like this
    
    context the class red was renamed from .one to .red
    here my class was marker one. but I just 
    create a rule with just one so it called inheretance
    one inhereted some attribute from marker rule */
}
.green{
    background: linear-gradient(#55680D, #71F53E, #116C31);
    box-shadow: 0px 0px 20px 0 #3B7E20CC;
}
.blue{
    background: linear-gradient(hsl(186, 76%, 16%), hsl(223, 90%, 60%), hsl(240, 56%, 42%));
    box-shadow: 0px 0px 20px 0px hsla(223, 59%,31%, 0.8);
}

/* for RGB color code
   primery color : Red Green Blue
   secondary color : Cyan Magenta Yellow 
   tertiary color : Orange Green Purple chartreuse
   azure rose


   box-shadow: offsetX offsetY blurRadius spreadRadius color;

Here's how the offsetX and offsetY values work:
both offsetX and offsetY accept number values in px and other CSS units
a positive offsetX value moves the shadow right and a negative value moves it left
a positive offsetY value moves the shadow down and a negative value moves it up
if you want a value of zero (0) for any or both offsetX and offsetY, you don't need to 
add a unit. Every browser understands that zero means no change.
The height and width of the shadow is determined by the height and width of the 
element it's applied to. You can also use an optional spreadRadius value to spread 
out the reach of the shadow. More on that later.
blurRadius add blur to the shadow.
spreadRadius expand the shadow out further

*/
